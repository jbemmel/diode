# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from netbox_diode_plugin.diode_reconciler_sdk.reconciler.v1 import \
    reconciler_pb2 as reconciler_dot_v1_dot_reconciler__pb2


class ReconcilerServiceStub(object):
    """Reconciler service API
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RetrieveIngestionDataSources = channel.unary_unary(
            '/reconciler.v1.ReconcilerService/RetrieveIngestionDataSources',
            request_serializer=reconciler_dot_v1_dot_reconciler__pb2.RetrieveIngestionDataSourcesRequest.SerializeToString,
            response_deserializer=reconciler_dot_v1_dot_reconciler__pb2.RetrieveIngestionDataSourcesResponse.FromString,
        )
        self.AddObjectState = channel.unary_unary(
            '/reconciler.v1.ReconcilerService/AddObjectState',
            request_serializer=reconciler_dot_v1_dot_reconciler__pb2.AddObjectStateRequest.SerializeToString,
            response_deserializer=reconciler_dot_v1_dot_reconciler__pb2.AddObjectStateResponse.FromString,
        )


class ReconcilerServiceServicer(object):
    """Reconciler service API
    """

    def RetrieveIngestionDataSources(self, request, context):
        """Retrieves ingestion data sources
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddObjectState(self, request, context):
        """Adds an object state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReconcilerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'RetrieveIngestionDataSources': grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveIngestionDataSources,
            request_deserializer=reconciler_dot_v1_dot_reconciler__pb2.RetrieveIngestionDataSourcesRequest.FromString,
            response_serializer=reconciler_dot_v1_dot_reconciler__pb2.RetrieveIngestionDataSourcesResponse.SerializeToString,
        ),
        'AddObjectState': grpc.unary_unary_rpc_method_handler(
            servicer.AddObjectState,
            request_deserializer=reconciler_dot_v1_dot_reconciler__pb2.AddObjectStateRequest.FromString,
            response_serializer=reconciler_dot_v1_dot_reconciler__pb2.AddObjectStateResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'reconciler.v1.ReconcilerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ReconcilerService(object):
    """Reconciler service API
    """

    @staticmethod
    def RetrieveIngestionDataSources(request,
                                     target,
                                     options=(),
                                     channel_credentials=None,
                                     call_credentials=None,
                                     insecure=False,
                                     compression=None,
                                     wait_for_ready=None,
                                     timeout=None,
                                     metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/reconciler.v1.ReconcilerService/RetrieveIngestionDataSources',
                                             reconciler_dot_v1_dot_reconciler__pb2.RetrieveIngestionDataSourcesRequest.SerializeToString,
                                             reconciler_dot_v1_dot_reconciler__pb2.RetrieveIngestionDataSourcesResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddObjectState(request,
                       target,
                       options=(),
                       channel_credentials=None,
                       call_credentials=None,
                       insecure=False,
                       compression=None,
                       wait_for_ready=None,
                       timeout=None,
                       metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reconciler.v1.ReconcilerService/AddObjectState',
                                             reconciler_dot_v1_dot_reconciler__pb2.AddObjectStateRequest.SerializeToString,
                                             reconciler_dot_v1_dot_reconciler__pb2.AddObjectStateResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
