syntax = "proto3";

package diode.v1;

import "diode/v1/device.proto";
import "diode/v1/device_role.proto";
import "diode/v1/device_type.proto";
import "diode/v1/interface.proto";
import "diode/v1/manufacturer.proto";
import "diode/v1/platform.proto";
import "diode/v1/site.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/netboxlabs/diode/diode-sdk-go/diode/v1/diodepb";

// An ingest entity wrapper
message IngestEntity {
  oneof data {
    Site site = 1;
    Platform platform = 2;
    Manufacturer manufacturer = 3;
    Device device = 4;
    DeviceRole device_role = 5;
    DeviceType device_type = 6;
    Interface interface = 7;
  }

  // The timestamp of the data discovery at source
  google.protobuf.Timestamp timestamp = 8 [
    (validate.rules).timestamp.required = true,
    (validate.rules).timestamp.lt_now = true
  ];
}

// The request to push data
message PushRequest {
  string stream = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 255
  }];
  repeated IngestEntity data = 2 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 1000
  }];

  string id = 3 [(validate.rules).string.uuid = true];
  string producer_app_name = 4 [(validate.rules).string = {
    min_len: 1,
    max_len: 255
  }];
  string producer_app_version = 5 [(validate.rules).string = {
    min_len: 1,
    max_len: 255
  }];
  string sdk_name = 6 [(validate.rules).string = {
    min_len: 1,
    max_len: 255
  }];
  string sdk_version = 7 [(validate.rules).string = {pattern: "^(\\d)+\\.(\\d)+\\.(\\d)+$"}];
}

// The response from the push request
message PushResponse {
  repeated string errors = 1;
}

// Distributor API
service DistributorService {
  // Ingests data into the system
  rpc Push(PushRequest) returns (PushResponse) {}
}
