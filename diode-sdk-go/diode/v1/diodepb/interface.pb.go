// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: diode/v1/interface.proto

package diodepb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An interface
type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device     *anypb.Any `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type       string     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Enabled    bool       `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        int32      `protobuf:"varint,5,opt,name=mtu,proto3" json:"mtu,omitempty"`
	MacAddress string     `protobuf:"bytes,6,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	MgmtOnly   bool       `protobuf:"varint,7,opt,name=mgmt_only,json=mgmtOnly,proto3" json:"mgmt_only,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_diode_v1_interface_proto_rawDescGZIP(), []int{0}
}

func (x *Interface) GetDevice() *anypb.Any {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Interface) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Interface) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Interface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Interface) GetMgmtOnly() bool {
	if x != nil {
		return x.MgmtOnly
	}
	return false
}

var File_diode_v1_interface_proto protoreflect.FileDescriptor

var file_diode_v1_interface_proto_rawDesc = []byte{
	0x0a, 0x18, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64, 0x69, 0x6f, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x0e, 0x0a, 0x09, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xfa, 0x0c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xe5, 0x0c, 0xfa,
	0x42, 0xe1, 0x0c, 0x72, 0xde, 0x0c, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52,
	0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x03, 0x6c, 0x61, 0x67, 0x52, 0x0a, 0x31, 0x30,
	0x30, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x66, 0x78, 0x52, 0x0b, 0x31, 0x30, 0x30, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x6c, 0x66, 0x78, 0x52, 0x0a, 0x31, 0x30, 0x30, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x74,
	0x78, 0x52, 0x0a, 0x31, 0x30, 0x30, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x74, 0x31, 0x52, 0x0a, 0x31,
	0x30, 0x30, 0x30, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x74, 0x52, 0x0f, 0x31, 0x30, 0x30, 0x30, 0x62,
	0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x67, 0x62, 0x69, 0x63, 0x52, 0x0e, 0x31, 0x30, 0x30, 0x30,
	0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x73, 0x66, 0x70, 0x52, 0x0a, 0x32, 0x2e, 0x35, 0x67,
	0x62, 0x61, 0x73, 0x65, 0x2d, 0x74, 0x52, 0x08, 0x35, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x74,
	0x52, 0x09, 0x31, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x74, 0x52, 0x0b, 0x31, 0x30, 0x67,
	0x62, 0x61, 0x73, 0x65, 0x2d, 0x63, 0x78, 0x34, 0x52, 0x0e, 0x31, 0x30, 0x67, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x78, 0x2d, 0x73, 0x66, 0x70, 0x70, 0x52, 0x0d, 0x31, 0x30, 0x67, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x78, 0x2d, 0x78, 0x66, 0x70, 0x52, 0x10, 0x31, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65,
	0x2d, 0x78, 0x2d, 0x78, 0x65, 0x6e, 0x70, 0x61, 0x6b, 0x52, 0x0c, 0x31, 0x30, 0x67, 0x62, 0x61,
	0x73, 0x65, 0x2d, 0x78, 0x2d, 0x78, 0x32, 0x52, 0x0f, 0x32, 0x35, 0x67, 0x62, 0x61, 0x73, 0x65,
	0x2d, 0x78, 0x2d, 0x73, 0x66, 0x70, 0x32, 0x38, 0x52, 0x0f, 0x35, 0x30, 0x67, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x78, 0x2d, 0x73, 0x66, 0x70, 0x35, 0x36, 0x52, 0x0f, 0x34, 0x30, 0x67, 0x62, 0x61,
	0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x70, 0x52, 0x0f, 0x35, 0x30, 0x67, 0x62,
	0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x73, 0x66, 0x70, 0x32, 0x38, 0x52, 0x0e, 0x31, 0x30, 0x30,
	0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x52, 0x0f, 0x31, 0x30, 0x30,
	0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x32, 0x52, 0x0f, 0x31, 0x30,
	0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x34, 0x52, 0x0e, 0x31,
	0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x78, 0x70, 0x52, 0x0f, 0x31,
	0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x70, 0x61, 0x6b, 0x52, 0x0f,
	0x31, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x64, 0x73, 0x66, 0x70, 0x52,
	0x10, 0x31, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x73, 0x66, 0x70, 0x64,
	0x64, 0x52, 0x11, 0x31, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73,
	0x66, 0x70, 0x32, 0x38, 0x52, 0x11, 0x31, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78,
	0x2d, 0x71, 0x73, 0x66, 0x70, 0x64, 0x64, 0x52, 0x0f, 0x32, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x32, 0x52, 0x11, 0x32, 0x30, 0x30, 0x67, 0x62, 0x61,
	0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x35, 0x36, 0x52, 0x11, 0x32, 0x30, 0x30,
	0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x64, 0x64, 0x52, 0x0f,
	0x34, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x32, 0x52,
	0x12, 0x34, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70,
	0x31, 0x31, 0x32, 0x52, 0x11, 0x34, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d,
	0x71, 0x73, 0x66, 0x70, 0x64, 0x64, 0x52, 0x0f, 0x34, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65,
	0x2d, 0x78, 0x2d, 0x6f, 0x73, 0x66, 0x70, 0x52, 0x13, 0x34, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x78, 0x2d, 0x6f, 0x73, 0x66, 0x70, 0x2d, 0x72, 0x68, 0x73, 0x52, 0x0f, 0x34, 0x30,
	0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x64, 0x66, 0x70, 0x52, 0x0f, 0x34,
	0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x38, 0x52, 0x11,
	0x38, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x64,
	0x64, 0x52, 0x0f, 0x38, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x6f, 0x73,
	0x66, 0x70, 0x52, 0x0b, 0x31, 0x30, 0x30, 0x30, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x78, 0x52,
	0x0a, 0x31, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x72, 0x52, 0x0b, 0x31, 0x30, 0x67,
	0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x78, 0x34, 0x52, 0x0a, 0x32, 0x35, 0x67, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x6b, 0x72, 0x52, 0x0b, 0x34, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x72,
	0x34, 0x52, 0x0a, 0x35, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x72, 0x52, 0x0c, 0x31,
	0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x70, 0x34, 0x52, 0x0c, 0x31, 0x30, 0x30,
	0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x72, 0x32, 0x52, 0x0c, 0x31, 0x30, 0x30, 0x67, 0x62,
	0x61, 0x73, 0x65, 0x2d, 0x6b, 0x72, 0x34, 0x52, 0x0b, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32,
	0x2e, 0x31, 0x31, 0x61, 0x52, 0x0b, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2e, 0x31, 0x31,
	0x67, 0x52, 0x0b, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2e, 0x31, 0x31, 0x6e, 0x52, 0x0c,
	0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2e, 0x31, 0x31, 0x61, 0x63, 0x52, 0x0c, 0x69, 0x65,
	0x65, 0x65, 0x38, 0x30, 0x32, 0x2e, 0x31, 0x31, 0x61, 0x64, 0x52, 0x0c, 0x69, 0x65, 0x65, 0x65,
	0x38, 0x30, 0x32, 0x2e, 0x31, 0x31, 0x61, 0x78, 0x52, 0x0c, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30,
	0x32, 0x2e, 0x31, 0x31, 0x61, 0x79, 0x52, 0x0c, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2e,
	0x31, 0x35, 0x2e, 0x31, 0x52, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x77, 0x69, 0x72, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x52, 0x03, 0x67, 0x73, 0x6d, 0x52, 0x04, 0x63, 0x64, 0x6d, 0x61, 0x52,
	0x03, 0x6c, 0x74, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x33, 0x52,
	0x0a, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x31, 0x32, 0x52, 0x0a, 0x73, 0x6f, 0x6e,
	0x65, 0x74, 0x2d, 0x6f, 0x63, 0x34, 0x38, 0x52, 0x0b, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f,
	0x63, 0x31, 0x39, 0x32, 0x52, 0x0b, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x37, 0x36,
	0x38, 0x52, 0x0c, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x31, 0x39, 0x32, 0x30, 0x52,
	0x0c, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x33, 0x38, 0x34, 0x30, 0x52, 0x08, 0x31,
	0x67, 0x66, 0x63, 0x2d, 0x73, 0x66, 0x70, 0x52, 0x08, 0x32, 0x67, 0x66, 0x63, 0x2d, 0x73, 0x66,
	0x70, 0x52, 0x08, 0x34, 0x67, 0x66, 0x63, 0x2d, 0x73, 0x66, 0x70, 0x52, 0x09, 0x38, 0x67, 0x66,
	0x63, 0x2d, 0x73, 0x66, 0x70, 0x70, 0x52, 0x0a, 0x31, 0x36, 0x67, 0x66, 0x63, 0x2d, 0x73, 0x66,
	0x70, 0x70, 0x52, 0x0b, 0x33, 0x32, 0x67, 0x66, 0x63, 0x2d, 0x73, 0x66, 0x70, 0x32, 0x38, 0x52,
	0x0b, 0x36, 0x34, 0x67, 0x66, 0x63, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x70, 0x52, 0x0d, 0x31, 0x32,
	0x38, 0x67, 0x66, 0x63, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x32, 0x38, 0x52, 0x0e, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x64, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x64, 0x64, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x71, 0x64, 0x72, 0x52, 0x10, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x66, 0x64, 0x72, 0x31, 0x30, 0x52, 0x0e, 0x69,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x66, 0x64, 0x72, 0x52, 0x0e, 0x69,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x65, 0x64, 0x72, 0x52, 0x0e, 0x69,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x68, 0x64, 0x72, 0x52, 0x0e, 0x69,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x6e, 0x64, 0x72, 0x52, 0x0e, 0x69,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x78, 0x64, 0x72, 0x52, 0x02, 0x74,
	0x31, 0x52, 0x02, 0x65, 0x31, 0x52, 0x02, 0x74, 0x33, 0x52, 0x02, 0x65, 0x33, 0x52, 0x04, 0x78,
	0x64, 0x73, 0x6c, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x73, 0x69, 0x73, 0x52, 0x04, 0x67, 0x70, 0x6f,
	0x6e, 0x52, 0x06, 0x78, 0x67, 0x2d, 0x70, 0x6f, 0x6e, 0x52, 0x07, 0x78, 0x67, 0x73, 0x2d, 0x70,
	0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6e, 0x32, 0x52, 0x04, 0x65, 0x70, 0x6f,
	0x6e, 0x52, 0x08, 0x31, 0x30, 0x67, 0x2d, 0x65, 0x70, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x52, 0x14, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x2d, 0x70, 0x6c,
	0x75, 0x73, 0x52, 0x0f, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x66, 0x6c, 0x65, 0x78, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x14, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x66, 0x6c, 0x65, 0x78, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x52, 0x12, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x2d, 0x38, 0x30, 0x52, 0x13, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x2d, 0x31,
	0x36, 0x30, 0x52, 0x13, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77,
	0x69, 0x73, 0x65, 0x2d, 0x33, 0x32, 0x30, 0x52, 0x13, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x2d, 0x34, 0x38, 0x30, 0x52, 0x12, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x2d, 0x31, 0x74,
	0x52, 0x0b, 0x6a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x2d, 0x76, 0x63, 0x70, 0x52, 0x13, 0x65,
	0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x17, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x2d, 0x73, 0x75, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x17, 0x65, 0x78, 0x74,
	0x72, 0x65, 0x6d, 0x65, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2d, 0x32, 0x35, 0x36, 0x52, 0x17, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x2d, 0x73, 0x75,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x35, 0x31, 0x32, 0x52, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0x80, 0x80, 0x04, 0x28, 0x01, 0x52, 0x03,
	0x6d, 0x74, 0x75, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x67, 0x6d, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x65, 0x74, 0x62, 0x6f, 0x78, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x64, 0x69, 0x6f, 0x64, 0x65,
	0x2f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x64, 0x69,
	0x6f, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diode_v1_interface_proto_rawDescOnce sync.Once
	file_diode_v1_interface_proto_rawDescData = file_diode_v1_interface_proto_rawDesc
)

func file_diode_v1_interface_proto_rawDescGZIP() []byte {
	file_diode_v1_interface_proto_rawDescOnce.Do(func() {
		file_diode_v1_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_diode_v1_interface_proto_rawDescData)
	})
	return file_diode_v1_interface_proto_rawDescData
}

var file_diode_v1_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_diode_v1_interface_proto_goTypes = []interface{}{
	(*Interface)(nil), // 0: diode.v1.Interface
	(*anypb.Any)(nil), // 1: google.protobuf.Any
}
var file_diode_v1_interface_proto_depIdxs = []int32{
	1, // 0: diode.v1.Interface.device:type_name -> google.protobuf.Any
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_diode_v1_interface_proto_init() }
func file_diode_v1_interface_proto_init() {
	if File_diode_v1_interface_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diode_v1_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diode_v1_interface_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_diode_v1_interface_proto_goTypes,
		DependencyIndexes: file_diode_v1_interface_proto_depIdxs,
		MessageInfos:      file_diode_v1_interface_proto_msgTypes,
	}.Build()
	File_diode_v1_interface_proto = out.File
	file_diode_v1_interface_proto_rawDesc = nil
	file_diode_v1_interface_proto_goTypes = nil
	file_diode_v1_interface_proto_depIdxs = nil
}
