syntax = "proto3";

package reconciler.v1;

import "reconciler/v1/device.proto";
import "reconciler/v1/device_role.proto";
import "reconciler/v1/device_type.proto";
import "reconciler/v1/manufacturer.proto";
import "reconciler/v1/platform.proto";
import "reconciler/v1/site.proto";
import "validate/validate.proto";

option go_package = "github.com/netboxlabs/diode/diode-server/reconciler/v1/reconcilerpb";

// An ingestion data source
message IngestionDataSource {
  string name = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 255
  }];
  string api_key = 2 [(validate.rules).string = {
    min_len: 40,
    max_len: 40
  }];
}

// The request to retrieve ingestion data sources
message RetrieveIngestionDataSourcesRequest {
  string name = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 255
  }];
  string sdk_name = 2 [(validate.rules).string = {
    min_len: 1,
    max_len: 255
  }];
  string sdk_version = 3 [(validate.rules).string = {pattern: "^(\\d)+\\.(\\d)+\\.(\\d)+$"}];
}

// The response from the retrieve ingestion data sources request
message RetrieveIngestionDataSourcesResponse {
  repeated IngestionDataSource ingestion_data_sources = 1;
}

message Object {
  oneof object {
    Device device = 1;
    DeviceRole device_role = 2;
    DeviceType device_type = 3;
    Manufacturer manufacturer = 4;
    Platform platform = 5;
    Site site = 6;
  }
}

// The request to add an object state
message AddObjectStateRequest {
  uint64 object_id = 1 [(validate.rules).uint64.gte = 1];
  uint64 object_change_id = 2 [(validate.rules).uint64.gte = 1];
  string object_type = 3 [(validate.rules).string = {
    min_len: 1,
    max_len: 255
  }];
  Object object = 4;
  string sdk_name = 5 [(validate.rules).string = {
    min_len: 1,
    max_len: 255
  }];
  string sdk_version = 6 [(validate.rules).string = {pattern: "^(\\d)+\\.(\\d)+\\.(\\d)+$"}];
}

// The response from the add object state request
message AddObjectStateResponse {
  repeated string errors = 1;
}

// Reconciler service API
service ReconcilerService {
  // Retrieves ingestion data sources
  rpc RetrieveIngestionDataSources(RetrieveIngestionDataSourcesRequest) returns (RetrieveIngestionDataSourcesResponse) {}

  // Adds an object state
  rpc AddObjectState(AddObjectStateRequest) returns (AddObjectStateResponse) {}
}
