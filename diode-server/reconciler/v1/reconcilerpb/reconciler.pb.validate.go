// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: reconciler/v1/reconciler.proto

package reconcilerpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IngestionDataSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IngestionDataSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngestionDataSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IngestionDataSourceMultiError, or nil if none found.
func (m *IngestionDataSource) ValidateAll() error {
	return m.validate(true)
}

func (m *IngestionDataSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := IngestionDataSourceValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiKey()) != 40 {
		err := IngestionDataSourceValidationError{
			field:  "ApiKey",
			reason: "value length must be 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return IngestionDataSourceMultiError(errors)
	}

	return nil
}

// IngestionDataSourceMultiError is an error wrapping multiple validation
// errors returned by IngestionDataSource.ValidateAll() if the designated
// constraints aren't met.
type IngestionDataSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngestionDataSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngestionDataSourceMultiError) AllErrors() []error { return m }

// IngestionDataSourceValidationError is the validation error returned by
// IngestionDataSource.Validate if the designated constraints aren't met.
type IngestionDataSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngestionDataSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngestionDataSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngestionDataSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngestionDataSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngestionDataSourceValidationError) ErrorName() string {
	return "IngestionDataSourceValidationError"
}

// Error satisfies the builtin error interface
func (e IngestionDataSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngestionDataSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngestionDataSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngestionDataSourceValidationError{}

// Validate checks the field values on RetrieveIngestionDataSourcesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RetrieveIngestionDataSourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveIngestionDataSourcesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RetrieveIngestionDataSourcesRequestMultiError, or nil if none found.
func (m *RetrieveIngestionDataSourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveIngestionDataSourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := RetrieveIngestionDataSourcesRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSdkName()); l < 1 || l > 255 {
		err := RetrieveIngestionDataSourcesRequestValidationError{
			field:  "SdkName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RetrieveIngestionDataSourcesRequest_SdkVersion_Pattern.MatchString(m.GetSdkVersion()) {
		err := RetrieveIngestionDataSourcesRequestValidationError{
			field:  "SdkVersion",
			reason: "value does not match regex pattern \"^(\\\\d)+\\\\.(\\\\d)+\\\\.(\\\\d)+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RetrieveIngestionDataSourcesRequestMultiError(errors)
	}

	return nil
}

// RetrieveIngestionDataSourcesRequestMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveIngestionDataSourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type RetrieveIngestionDataSourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveIngestionDataSourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveIngestionDataSourcesRequestMultiError) AllErrors() []error { return m }

// RetrieveIngestionDataSourcesRequestValidationError is the validation error
// returned by RetrieveIngestionDataSourcesRequest.Validate if the designated
// constraints aren't met.
type RetrieveIngestionDataSourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveIngestionDataSourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveIngestionDataSourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveIngestionDataSourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveIngestionDataSourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveIngestionDataSourcesRequestValidationError) ErrorName() string {
	return "RetrieveIngestionDataSourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveIngestionDataSourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveIngestionDataSourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveIngestionDataSourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveIngestionDataSourcesRequestValidationError{}

var _RetrieveIngestionDataSourcesRequest_SdkVersion_Pattern = regexp.MustCompile("^(\\d)+\\.(\\d)+\\.(\\d)+$")

// Validate checks the field values on RetrieveIngestionDataSourcesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RetrieveIngestionDataSourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveIngestionDataSourcesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RetrieveIngestionDataSourcesResponseMultiError, or nil if none found.
func (m *RetrieveIngestionDataSourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveIngestionDataSourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIngestionDataSources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RetrieveIngestionDataSourcesResponseValidationError{
						field:  fmt.Sprintf("IngestionDataSources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RetrieveIngestionDataSourcesResponseValidationError{
						field:  fmt.Sprintf("IngestionDataSources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveIngestionDataSourcesResponseValidationError{
					field:  fmt.Sprintf("IngestionDataSources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RetrieveIngestionDataSourcesResponseMultiError(errors)
	}

	return nil
}

// RetrieveIngestionDataSourcesResponseMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveIngestionDataSourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type RetrieveIngestionDataSourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveIngestionDataSourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveIngestionDataSourcesResponseMultiError) AllErrors() []error { return m }

// RetrieveIngestionDataSourcesResponseValidationError is the validation error
// returned by RetrieveIngestionDataSourcesResponse.Validate if the designated
// constraints aren't met.
type RetrieveIngestionDataSourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveIngestionDataSourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveIngestionDataSourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveIngestionDataSourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveIngestionDataSourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveIngestionDataSourcesResponseValidationError) ErrorName() string {
	return "RetrieveIngestionDataSourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveIngestionDataSourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveIngestionDataSourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveIngestionDataSourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveIngestionDataSourcesResponseValidationError{}

// Validate checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ObjectMultiError, or nil if none found.
func (m *Object) ValidateAll() error {
	return m.validate(true)
}

func (m *Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Object.(type) {
	case *Object_Device:
		if v == nil {
			err := ObjectValidationError{
				field:  "Object",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDevice()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "Device",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "Device",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Object_DeviceRole:
		if v == nil {
			err := ObjectValidationError{
				field:  "Object",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeviceRole()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "DeviceRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "DeviceRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeviceRole()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectValidationError{
					field:  "DeviceRole",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Object_DeviceType:
		if v == nil {
			err := ObjectValidationError{
				field:  "Object",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeviceType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "DeviceType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "DeviceType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeviceType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectValidationError{
					field:  "DeviceType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Object_Manufacturer:
		if v == nil {
			err := ObjectValidationError{
				field:  "Object",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetManufacturer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "Manufacturer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "Manufacturer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetManufacturer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectValidationError{
					field:  "Manufacturer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Object_Platform:
		if v == nil {
			err := ObjectValidationError{
				field:  "Object",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPlatform()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "Platform",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "Platform",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlatform()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectValidationError{
					field:  "Platform",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Object_Site:
		if v == nil {
			err := ObjectValidationError{
				field:  "Object",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSite()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "Site",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectValidationError{
						field:  "Site",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSite()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ObjectMultiError(errors)
	}

	return nil
}

// ObjectMultiError is an error wrapping multiple validation errors returned by
// Object.ValidateAll() if the designated constraints aren't met.
type ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectMultiError) AllErrors() []error { return m }

// ObjectValidationError is the validation error returned by Object.Validate if
// the designated constraints aren't met.
type ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectValidationError) ErrorName() string { return "ObjectValidationError" }

// Error satisfies the builtin error interface
func (e ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectValidationError{}

// Validate checks the field values on AddObjectStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddObjectStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddObjectStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddObjectStateRequestMultiError, or nil if none found.
func (m *AddObjectStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddObjectStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetObjectId() < 1 {
		err := AddObjectStateRequestValidationError{
			field:  "ObjectId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetObjectChangeId() < 1 {
		err := AddObjectStateRequestValidationError{
			field:  "ObjectChangeId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetObjectType()); l < 1 || l > 255 {
		err := AddObjectStateRequestValidationError{
			field:  "ObjectType",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddObjectStateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddObjectStateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddObjectStateRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetSdkName()); l < 1 || l > 255 {
		err := AddObjectStateRequestValidationError{
			field:  "SdkName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddObjectStateRequest_SdkVersion_Pattern.MatchString(m.GetSdkVersion()) {
		err := AddObjectStateRequestValidationError{
			field:  "SdkVersion",
			reason: "value does not match regex pattern \"^(\\\\d)+\\\\.(\\\\d)+\\\\.(\\\\d)+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddObjectStateRequestMultiError(errors)
	}

	return nil
}

// AddObjectStateRequestMultiError is an error wrapping multiple validation
// errors returned by AddObjectStateRequest.ValidateAll() if the designated
// constraints aren't met.
type AddObjectStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddObjectStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddObjectStateRequestMultiError) AllErrors() []error { return m }

// AddObjectStateRequestValidationError is the validation error returned by
// AddObjectStateRequest.Validate if the designated constraints aren't met.
type AddObjectStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddObjectStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddObjectStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddObjectStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddObjectStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddObjectStateRequestValidationError) ErrorName() string {
	return "AddObjectStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddObjectStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddObjectStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddObjectStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddObjectStateRequestValidationError{}

var _AddObjectStateRequest_SdkVersion_Pattern = regexp.MustCompile("^(\\d)+\\.(\\d)+\\.(\\d)+$")

// Validate checks the field values on AddObjectStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddObjectStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddObjectStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddObjectStateResponseMultiError, or nil if none found.
func (m *AddObjectStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddObjectStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddObjectStateResponseMultiError(errors)
	}

	return nil
}

// AddObjectStateResponseMultiError is an error wrapping multiple validation
// errors returned by AddObjectStateResponse.ValidateAll() if the designated
// constraints aren't met.
type AddObjectStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddObjectStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddObjectStateResponseMultiError) AllErrors() []error { return m }

// AddObjectStateResponseValidationError is the validation error returned by
// AddObjectStateResponse.Validate if the designated constraints aren't met.
type AddObjectStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddObjectStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddObjectStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddObjectStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddObjectStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddObjectStateResponseValidationError) ErrorName() string {
	return "AddObjectStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddObjectStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddObjectStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddObjectStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddObjectStateResponseValidationError{}
